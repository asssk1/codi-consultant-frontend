// ✅ App.jsx

// -----------------------------
// ✅ Import 구문
// -----------------------------
import React, { useState, useEffect } from "react";
import {
  getAuth,
  signInAnonymously,
  onAuthStateChanged,
  signOut,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from "firebase/auth";
import {
  getFirestore,
  collection,
  addDoc,
  onSnapshot,
  query,
  serverTimestamp,
  doc,
  setDoc,
} from "firebase/firestore";
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";

// -----------------------------
// ✅ Firebase 설정
// -----------------------------
const firebaseConfig = {
  apiKey: "AIzaSyCD3oldgjO-TIWNCYgAPaLrciMzOmaSS34",
  authDomain: "ai-codi-consultant.firebaseapp.com",
  projectId: "ai-codi-consultant",
  storageBucket: "ai-codi-consultant.appspot.com",
  messagingSenderId: "335529211517",
  appId: "1:335529211517:web:1e3f407cfdcdbac08a6314",
  measurementId: "G-GS578RP9RY",
};

// ✅ Firebase 초기화
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const db = getFirestore(app);
const auth = getAuth(app);

const appId = firebaseConfig.appId;
console.log("🔥 Firebase App ID:", appId);

// -----------------------------
// ✅ Gemini API 설정
// -----------------------------
const API_KEY = "AIzaSyAWv2SjUdrM1n-flUSaHa3wHCiS1zfuGX8";
const API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=";

// -----------------------------
// ✅ 유틸 함수
// -----------------------------
const fileToBase64 = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result.split(",")[1]);
    reader.onerror = (error) => reject(error);
  });
};

const getRandomPlaceholderImage = () => {
  const sizes = [
    "300x300",
    "350x350",
    "400x400",
    "450x450",
    "500x500",
    "300x400",
    "400x300",
    "350x450",
    "450x350",
  ];
  const randomSize = sizes[Math.floor(Math.random() * sizes.length)];
  return `https://placehold.co/${randomSize}/d1d5db/374151?text=Image`;
};

// -----------------------------
// ✅ 메인 컴포넌트
// -----------------------------
export default function App() {
  // -----------------------------
  // ✅ 상태 관리
  // -----------------------------
  const [user, setUser] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [outfitImage, setOutfitImage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [recommendations, setRecommendations] = useState([]);
  const [savedOutfits, setSavedOutfits] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [dob, setDob] = useState("");
  const [authView, setAuthView] = useState("login"); // 'login' or 'signup'
  const [serviceView, setServiceView] = useState(null); // 'evaluation' or 'consultant'

  // -----------------------------
  // ✅ Firebase 인증 & 데이터
  // -----------------------------
  useEffect(() => {
    const signIn = async () => {
      try {
        await signInAnonymously(auth);
      } catch (error) {
        console.error("Firebase auth error:", error);
      }
    };
    signIn();

    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      setIsAuthReady(true);
      if (currentUser) {
        const outfitsRef = collection(
          db,
          `artifacts/${appId}/users/${currentUser.uid}/saved_outfits`
        );
        const q = query(outfitsRef);
        onSnapshot(q, (snapshot) => {
          const outfits = snapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));
          outfits.sort(
            (a, b) =>
              (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0)
          );
          setSavedOutfits(outfits);
        });
      }
    });

    return () => unsubscribe();
  }, []);

  // -----------------------------
  // ✅ 파일 업로드
  // -----------------------------
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setOutfitImage(file);
      setRecommendations([]);
      setErrorMessage("");
      setSuccessMessage("");
    }
  };

  // -----------------------------
  // ✅ 코디 추천
  // -----------------------------fetch
  const generateCodi = async () => {
    if (!outfitImage) {
      setErrorMessage("옷 사진을 먼저 업로드해 주세요.");
      return;
    }
    setErrorMessage("");
    setIsLoading(true);

    try {
      const base64Image = await fileToBase64(outfitImage);
      const prompt = `사용자가 제공한 옷 사진과 어울리는 남성 코디 아이디어를 JSON 형식으로 추천해 줘. 
      추천 코디는 3가지 이상으로 구성하고, 각 코디는 '상의', '하의', '아우터', '신발', '액세서리' 등 최소 3개 이상의 아이템으로 구성해줘. 
      각 아이템의 '스타일(style)'과 '색상(color)'에 대한 상세 설명도 포함해줘.
      JSON 응답 형식은 다음과 같아:
      { "outfitRecommendations": [ { "title": "코디 제목", "items": [ { "type": "아이템 종류", "style": "스타일 설명", "color": "색상 설명" }, ... ] }, ... ] }`;

      const payload = {
        contents: [
          {
            parts: [
              { text: prompt },
              {
                inlineData: {
                  mimeType: outfitImage.type,
                  data: base64Image,
                },
              },
            ],
          },
        ],
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              outfitRecommendations: {
                type: "ARRAY",
                items: {
                  type: "OBJECT",
                  properties: {
                    title: { type: "STRING" },
                    items: {
                      type: "ARRAY",
                      items: {
                        type: "OBJECT",
                        properties: {
                          type: { type: "STRING" },
                          style: { type: "STRING" },
                          color: { type: "STRING" },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      };
      const response = await fetch("http://localhost:5000/api/gemini", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
      const result = await response.json();
      const textResponse = result?.candidates?.[0]?.content?.parts?.[0]?.text;

      if (textResponse) {
        try {
          const parsedData = JSON.parse(textResponse);
          setRecommendations(parsedData.outfitRecommendations);
        } catch (parseError) {
          console.error("Failed to parse JSON:", textResponse, parseError);
          setErrorMessage("죄송합니다. 코디 추천에 실패했습니다. 다시 시도해 주세요.");
        }
      } else {
        setErrorMessage("코디 추천을 받을 수 없습니다. 다시 시도해 주세요.");
      }
    } catch (error) {
      console.error("Error generating codi:", error);
      setErrorMessage("코디 추천 중 오류가 발생했습니다. 잠시 후 다시 시도해 주세요.");
    } finally {
      setIsLoading(false);
    }
  };

  // -----------------------------
  // ✅ Firestore 저장
  // -----------------------------
  const saveOutfit = async (recommendation) => {
    if (!user || !user.uid) {
      setErrorMessage("로그인이 필요합니다.");
      return;
    }
    if (!outfitImage) {
      setErrorMessage("옷 사진을 먼저 업로드해 주세요.");
      return;
    }
    try {
      const userId = user.uid;
      const outfitsRef = collection(
        db,
        `artifacts/${appId}/users/${userId}/saved_outfits`
      );
      await addDoc(outfitsRef, {
        outfitImageURL: URL.createObjectURL(outfitImage),
        recommendation,
        createdAt: serverTimestamp(),
      });
      setSuccessMessage("코디가 성공적으로 저장되었습니다!");
      setTimeout(() => setSuccessMessage(""), 3000);
    } catch (error) {
      console.error("Error saving outfit:", error);
      setErrorMessage("코디 저장 중 오류가 발생했습니다. 잠시 후 다시 시도해 주세요.");
    }
  };

  // -----------------------------
  // ✅ 로그인/회원가입/로그아웃
  // -----------------------------
  const handleLogout = async () => {
    try {
      await signOut(auth);
      setSavedOutfits([]);
      setRecommendations([]);
      setOutfitImage(null);
      setSuccessMessage("로그아웃되었습니다.");
      setTimeout(() => setSuccessMessage(""), 3000);
    } catch (error) {
      console.error("Logout error:", error);
      setErrorMessage("로그아웃 중 오류가 발생했습니다. 다시 시도해 주세요.");
    }
  };

  const handleLogin = async () => {
    setErrorMessage("");
    setSuccessMessage("");
    if (!email || !password) {
      setErrorMessage("이메일과 비밀번호를 입력해주세요.");
      return;
    }
    setIsLoading(true);
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setSuccessMessage("로그인에 성공했습니다!");
    } catch (error) {
      console.error("Login error:", error);
      setErrorMessage("이메일 또는 비밀번호가 올바르지 않습니다.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignup = async () => {
    setErrorMessage("");
    setSuccessMessage("");
    if (!name || !email || !password || !dob) {
      setErrorMessage("모든 정보를 입력해주세요.");
      return;
    }
    if (password.length < 6) {
      setErrorMessage("비밀번호는 6자 이상이어야 합니다.");
      return;
    }
    setIsLoading(true);
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const uid = userCredential.user.uid;

      const userDocRef = doc(db, `artifacts/${appId}/users/${uid}`);
      await setDoc(userDocRef, {
        name,
        dob,
        email,
        createdAt: serverTimestamp(),
      });

      setSuccessMessage("회원가입이 완료되었습니다!");
      setAuthView("login");
    } catch (error) {
      console.error("Signup error:", error);
      if (error.code === "auth/email-already-in-use") {
        setErrorMessage("이미 사용 중인 이메일입니다.");
      } else if (error.code === "auth/invalid-email") {
        setErrorMessage("유효하지 않은 이메일 형식입니다.");
      } else if (error.code === "auth/weak-password") {
        setErrorMessage("비밀번호는 6자리 이상이어야 합니다.");
      } else {
        setErrorMessage("회원가입 중 오류가 발생했습니다.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  // -----------------------------
  // ✅ UI 구성 (AuthForm / Service / etc)
  // -----------------------------
  const AuthForm = () => (
    <div className="bg-white rounded-xl shadow-lg p-8 sm:p-12 text-center max-w-sm w-full">
      <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-4">
        AI 코디 컨설턴트
      </h1>
      <p className="text-gray-600 mb-8">
        {authView === "login"
          ? "로그인하여 서비스를 이용하세요."
          : "회원가입하고 나만의 코디북을 만드세요."}
      </p>

      {authView === "signup" && (
        <div className="space-y-4">
          <input
            type="text"
            placeholder="이름"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          />
          <input
            type="date"
            placeholder="생년월일"
            value={dob}
            onChange={(e) => setDob(e.target.value)}
            className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          />
        </div>
      )}

      <div className="space-y-4 mt-4">
        <input
          type="email"
          placeholder="이메일"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
        />
        <input
          type="password"
          placeholder="비밀번호 (6자 이상)"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
        />
      </div>

      <div className="flex flex-col sm:flex-row gap-4 mt-6">
        {authView === "login" ? (
          <button
            onClick={handleLogin}
            disabled={isLoading}
            className={`flex-1 px-6 py-3 rounded-lg shadow-md font-semibold transition ${
              isLoading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-gray-800 text-white hover:bg-gray-900"
            }`}
          >
            {isLoading ? "로그인 중..." : "로그인"}
          </button>
        ) : (
          <button
            onClick={handleSignup}
            disabled={isLoading}
            className={`flex-1 px-6 py-3 rounded-lg shadow-md font-semibold transition ${
              isLoading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-500 text-white hover:bg-blue-600"
            }`}
          >
            {isLoading ? "가입 중..." : "회원가입"}
          </button>
        )}
      </div>

      {errorMessage && <p className="text-red-500 mt-4 text-sm">{errorMessage}</p>}
      {successMessage && (
        <p className="text-green-500 mt-4 text-sm">{successMessage}</p>
      )}

      <p className="text-gray-500 text-sm mt-6">
        {authView === "login" ? "계정이 없으신가요?" : "이미 계정이 있으신가요?"}
        <button
          onClick={() => setAuthView(authView === "login" ? "signup" : "login")}
          className="text-blue-500 font-medium ml-1 hover:underline focus:outline-none"
        >
          {authView === "login" ? "회원가입" : "로그인"}
        </button>
      </p>
    </div>
  );

  // -----------------------------
  // ✅ 렌더링
  // -----------------------------
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 sm:p-8 font-sans">
        <AuthForm />
      </div>
    );
  }

  // TODO: 나머지 serviceView (consultant, evaluation)는 그대로 유지
  // 위쪽 코드에 있던 render 부분 그대로 두면 됨.
}
